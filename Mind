-- Carrega Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- Variáveis de controle extras
local InfiniteJumpEnabled = false
local NoclipEnabled = false

local ESP_Aimbot = {
    Config = {
        AimbotEnabled = false,
        ESPEnabled = false,
        BoxESP = false,
        NameESP = false,
        TracerESP = false,
        HealthBar = false,
        ChamsEnabled = false,
        FOVCircle = false,
        AimSmoothness = 0.15,
        FOVRadius = 80,
        FOVColor = Color3.fromRGB(255, 0, 255),
        ChamsColor = Color3.fromRGB(255, 0, 255),
        RGBMode = false,
        RGBSpeed = 0.6,
        HealthBarRGB = false,
        TargetPart = "Head",
        HitboxEnabled = false,
        HitboxSize = 2,
        XRAYEnabled = false,
        XRAYTransparency = 0.2,
        ShowDistance = true,
        ShowWeapon = true,
        AmbientLighting = false,
        AmbientColor = Color3.fromRGB(255,255,255),
        AmbientBrightness = 2.5,
    },
    ESPObjects = {},
    Highlights = {},
    OriginalHitbox = {},
    XRayed = {},
    OriginalAmbient = Lighting.Ambient,
    OriginalBrightness = Lighting.Brightness,
}

-- Funções utilitárias e principais (mantidas do seu código)
local function getRainbowColor(speed)
    local t = tick() * (speed or 1)
    return Color3.fromHSV((t % 5) / 5, 1, 1)
end

local function getPart(char, prefer)
    prefer = prefer or ESP_Aimbot.Config.TargetPart
    if char:FindFirstChild(prefer) and char[prefer]:IsA("BasePart") then
        return char[prefer]
    end
    for _, name in ipairs({"Head","UpperTorso","Torso","HumanoidRootPart"}) do
        if char:FindFirstChild(name) and char[name]:IsA("BasePart") then
            return char[name]
        end
    end
    return nil
end

local function applyHitbox(player)
    local char = player.Character
    if not char then return end
    local part = getPart(char)
    if not part then return end
    ESP_Aimbot.OriginalHitbox[player] = ESP_Aimbot.OriginalHitbox[player] or {}
    if not ESP_Aimbot.OriginalHitbox[player][part.Name] then
        ESP_Aimbot.OriginalHitbox[player][part.Name] = {
            Size = part.Size,
            Transparency = part.Transparency,
            CanCollide = part.CanCollide,
            Massless = part.Massless
        }
    end
    part.Size = Vector3.new(ESP_Aimbot.Config.HitboxSize, ESP_Aimbot.Config.HitboxSize, ESP_Aimbot.Config.HitboxSize)
    part.Transparency = 0.7
    part.CanCollide = false
    part.Massless = true
end

local function resetHitbox(player)
    local char = player.Character
    if not char or not ESP_Aimbot.OriginalHitbox[player] then return end
    for partName, data in pairs(ESP_Aimbot.OriginalHitbox[player]) do
        local part = char:FindFirstChild(partName)
        if part and part:IsA("BasePart") then
            part.Size = data.Size
            part.Transparency = data.Transparency
            part.CanCollide = data.CanCollide
            part.Massless = data.Massless
        end
    end
    ESP_Aimbot.OriginalHitbox[player] = nil
end

local function updateHitboxes()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if ESP_Aimbot.Config.HitboxEnabled then
                applyHitbox(player)
            else
                resetHitbox(player)
            end
        else
            resetHitbox(player)
        end
    end
end

local function enableXRAY(transparency)
    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v:IsDescendantOf(LocalPlayer.Character) then
            if not ESP_Aimbot.XRayed[v] then
                ESP_Aimbot.XRayed[v] = v.Transparency
            end
            v.LocalTransparencyModifier = transparency or ESP_Aimbot.Config.XRAYTransparency
        end
    end
end

local function disableXRAY()
    for v, orig in pairs(ESP_Aimbot.XRayed) do
        if v and v:IsA("BasePart") then
            v.LocalTransparencyModifier = orig or 0
        end
    end
    ESP_Aimbot.XRayed = {}
end

local function newDrawing(type, props)
    local draw = Drawing.new(type)
    for i, v in pairs(props) do draw[i] = v end
    return draw
end

local function createESPElements()
    return {
        Box = newDrawing("Square", {Visible = false, Thickness = 2, Filled = false}),
        Name = newDrawing("Text", {Visible = false, Center = true, Outline = true, Size = 16, Font = 2}),
        Tracer = newDrawing("Line", {Visible = false, Thickness = 1}),
        Health = newDrawing("Line", {Visible = false, Thickness = 4}),
        Distance = newDrawing("Text", {Visible = false, Center = true, Outline = true, Size = 14, Font = 2}),
        Weapon = newDrawing("Text", {Visible = false, Center = true, Outline = true, Size = 14, Font = 2}),
    }
end

local function hideESP(data)
    if not data then return end
    for _, obj in pairs(data) do
        obj.Visible = false
    end
end

local function clearChams(player)
    if ESP_Aimbot.Highlights[player] then
        if ESP_Aimbot.Highlights[player].Parent then
            ESP_Aimbot.Highlights[player]:Destroy()
        end
        ESP_Aimbot.Highlights[player] = nil
    end
    if player.Character and player.Character:FindFirstChild("CustomHighlight") then
        player.Character.CustomHighlight:Destroy()
    end
end

local function applyChams(player)
    if not ESP_Aimbot.Config.ChamsEnabled or not ESP_Aimbot.Config.ESPEnabled then
        clearChams(player)
        return
    end
    local char = player.Character
    if char then
        local highlight = char:FindFirstChild("CustomHighlight")
        if not highlight then
            highlight = Instance.new("Highlight")
            highlight.Name = "CustomHighlight"
            highlight.Adornee = char
            highlight.Parent = char
        end
        local col = ESP_Aimbot.Config.RGBMode and getRainbowColor(ESP_Aimbot.Config.RGBSpeed) or ESP_Aimbot.Config.ChamsColor
        highlight.FillColor = col
        highlight.OutlineColor = col
        highlight.FillTransparency = 1
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        ESP_Aimbot.Highlights[player] = highlight
    end
end

local function updateChamsRGB()
    for player, highlight in pairs(ESP_Aimbot.Highlights) do
        if highlight and highlight.Parent then
            local col = getRainbowColor(ESP_Aimbot.Config.RGBSpeed)
            highlight.FillColor = col
            highlight.OutlineColor = col
        end
    end
end

local function removeAllChams()
    for _, player in ipairs(Players:GetPlayers()) do
        clearChams(player)
    end
    ESP_Aimbot.Highlights = {}
end

local DrawingFOV = Drawing.new("Circle")
DrawingFOV.Thickness = 1.8
DrawingFOV.Color = ESP_Aimbot.Config.FOVColor
DrawingFOV.Filled = false
DrawingFOV.Radius = ESP_Aimbot.Config.FOVRadius
DrawingFOV.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
DrawingFOV.Visible = ESP_Aimbot.Config.FOVCircle

local FOVLine = Drawing.new("Line")
FOVLine.Color = ESP_Aimbot.Config.FOVColor
FOVLine.Thickness = 1.5
FOVLine.Visible = false

local function getClosestTarget()
    local closest, minDist = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local part = getPart(player.Character)
            if part then
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - DrawingFOV.Position).Magnitude
                    if dist < ESP_Aimbot.Config.FOVRadius and dist < minDist then
                        closest, minDist = player, dist
                    end
                end
            end
        end
    end
    return closest
end

local function updateLighting()
    if ESP_Aimbot.Config.AmbientLighting then
        Lighting.Ambient = ESP_Aimbot.Config.AmbientColor
        Lighting.Brightness = ESP_Aimbot.Config.AmbientBrightness
    else
        Lighting.Ambient = ESP_Aimbot.OriginalAmbient
        Lighting.Brightness = ESP_Aimbot.OriginalBrightness
    end
end

RunService.RenderStepped:Connect(function()
    updateLighting()
    DrawingFOV.Visible = ESP_Aimbot.Config.FOVCircle
    DrawingFOV.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    DrawingFOV.Color = ESP_Aimbot.Config.RGBMode and getRainbowColor(ESP_Aimbot.Config.RGBSpeed) or ESP_Aimbot.Config.FOVColor
    DrawingFOV.Radius = ESP_Aimbot.Config.FOVRadius
    updateHitboxes()
    if ESP_Aimbot.Config.XRAYEnabled then
        enableXRAY(ESP_Aimbot.Config.XRAYTransparency)
    else
        disableXRAY()
    end

    local target = ESP_Aimbot.Config.AimbotEnabled and getClosestTarget() or nil
    if target and target.Character then
        local part = getPart(target.Character)
        if part then
            local screenPos = Camera:WorldToViewportPoint(part.Position)
            local dir = (part.Position - Camera.CFrame.Position).Unit
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + dir), ESP_Aimbot.Config.AimSmoothness)
            if ESP_Aimbot.Config.FOVCircle then
                FOVLine.Visible = true
                FOVLine.From = DrawingFOV.Position
                FOVLine.To = Vector2.new(screenPos.X, screenPos.Y)
                FOVLine.Color = DrawingFOV.Color
            end
        end
    else
        FOVLine.Visible = false
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if ESP_Aimbot.Config.ESPEnabled then
            if ESP_Aimbot.Config.ChamsEnabled then
                applyChams(player)
            else
                clearChams(player)
            end
        else
            clearChams(player)
        end

        local char = player.Character
        local humanoid = char and char:FindFirstChildOfClass("Humanoid")
        if player ~= LocalPlayer and char and char:FindFirstChild("HumanoidRootPart") then
            if humanoid and humanoid.Health > 0 and ESP_Aimbot.Config.ESPEnabled then
                if not ESP_Aimbot.ESPObjects[player] then ESP_Aimbot.ESPObjects[player] = createESPElements() end
                local box = ESP_Aimbot.ESPObjects[player]
                local success, cf, size = pcall(char.GetBoundingBox, char)
                if success then
                    local points, visible = {}, true
                    for x = -1,1,2 do for y = -1,1,2 do for z = -1,1,2 do
                        local corner = cf * Vector3.new(size.X/2 * x, size.Y/2 * y, size.Z/2 * z)
                        local pos, onScreen = Camera:WorldToViewportPoint(corner)
                        if not onScreen then visible = false end
                        table.insert(points, Vector2.new(pos.X, pos.Y))
                    end end end
                    if visible then
                        local minX, minY, maxX, maxY = math.huge, math.huge, -math.huge, -math.huge
                        for _, pt in pairs(points) do
                            minX = math.min(minX, pt.X)
                            minY = math.min(minY, pt.Y)
                            maxX = math.max(maxX, pt.X)
                            maxY = math.max(maxY, pt.Y)
                        end
                        local width, height = maxX - minX, maxY - minY
                        local midX = minX + width / 2
                        box.Box.Visible = ESP_Aimbot.Config.BoxESP
                        box.Box.Position = Vector2.new(minX, minY)
                        box.Box.Size = Vector2.new(width, height)
                        box.Box.Color = DrawingFOV.Color
                        box.Name.Visible = ESP_Aimbot.Config.NameESP
                        box.Name.Text = player.Name
                        box.Name.Position = Vector2.new(midX, minY - 18)
                        box.Name.Color = DrawingFOV.Color
                        box.Tracer.Visible = ESP_Aimbot.Config.TracerESP
                        box.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        box.Tracer.To = Vector2.new(midX, maxY)
                        box.Tracer.Color = DrawingFOV.Color
                        local ratio = humanoid.Health / humanoid.MaxHealth
                        box.Health.Visible = ESP_Aimbot.Config.HealthBar
                        if ESP_Aimbot.Config.HealthBarRGB then
                            box.Health.Color = getRainbowColor(ESP_Aimbot.Config.RGBSpeed)
                        else
                            box.Health.Color = ratio > 0.7 and Color3.new(0,1,0) or ratio > 0.3 and Color3.new(1,1,0) or Color3.new(1,0,0)
                        end
                        box.Health.From = Vector2.new(minX - 5, maxY)
                        box.Health.To = Vector2.new(minX - 5, maxY - height * ratio)
                        -- Distância
                        local dist = (Camera.CFrame.Position - char.HumanoidRootPart.Position).Magnitude
                        box.Distance.Visible = ESP_Aimbot.Config.ShowDistance
                        box.Distance.Text = ("[%.1f m]"):format(dist)
                        box.Distance.Position = Vector2.new(midX, maxY + 16)
                        box.Distance.Color = DrawingFOV.Color
                        -- Arma
                        local weaponName = ""
                        if ESP_Aimbot.Config.ShowWeapon then
                            for _, v in ipairs(char:GetChildren()) do
                                if v:IsA("Tool") or (v:IsA("Model") and (v:FindFirstChild("GunScript") or v:FindFirstChild("Handle"))) then
                                    weaponName = v.Name; break
                                end
                            end
                        end
                        box.Weapon.Visible = ESP_Aimbot.Config.ShowWeapon and weaponName ~= ""
                        box.Weapon.Text = weaponName
                        box.Weapon.Position = Vector2.new(midX, minY - 34)
                        box.Weapon.Color = DrawingFOV.Color
                    else
                        hideESP(box)
                    end
                else
                    hideESP(box)
                end
            else
                hideESP(ESP_Aimbot.ESPObjects[player])
            end
        else
            hideESP(ESP_Aimbot.ESPObjects[player])
        end
    end

    if ESP_Aimbot.Config.ChamsEnabled and ESP_Aimbot.Config.RGBMode then
        updateChamsRGB()
    end
end)

Players.PlayerRemoving:Connect(function(plr)
    resetHitbox(plr)
    clearChams(plr)
    if ESP_Aimbot.ESPObjects[plr] then
        for _, obj in pairs(ESP_Aimbot.ESPObjects[plr]) do
            if obj.Remove then obj:Remove() end
        end
        ESP_Aimbot.ESPObjects[plr] = nil
    end
    clearChams(plr)
end)

-- Noclip sempre ativo quando habilitado
RunService.Stepped:Connect(function()
    if NoclipEnabled and LocalPlayer.Character then
        for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end
end)

-- Pulo Infinito
UserInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- INTERFACE RAYFIELD
local Window = Rayfield:CreateWindow({
    Name = "🌍 Scripts Heaven Loader",
    LoadingTitle = "Iniciando Scripts Heaven",
    LoadingSubtitle = "powered by LUA GOD",
    Theme = "Default",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "HeavenUILoader"
    }
})

local Tab = Window:CreateTab("ESP & Aimbot", 4483362458)
Tab:CreateToggle({Name = "ESP", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.ESPEnabled = x end})
Tab:CreateToggle({Name = "Box ESP", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.BoxESP = x end})
Tab:CreateToggle({Name = "Name ESP", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.NameESP = x end})
Tab:CreateToggle({Name = "Tracer ESP", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.TracerESP = x end})
Tab:CreateToggle({Name = "Health Bar", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.HealthBar = x end})
Tab:CreateToggle({Name = "Show Distance", CurrentValue = true, Callback = function(x) ESP_Aimbot.Config.ShowDistance = x end})
Tab:CreateToggle({Name = "Show Weapon", CurrentValue = true, Callback = function(x) ESP_Aimbot.Config.ShowWeapon = x end})
Tab:CreateToggle({Name = "Chams", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.ChamsEnabled = x end})
Tab:CreateToggle({Name = "Aimbot", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.AimbotEnabled = x end})
Tab:CreateSlider({Name = "FOV", Range = {10, 300}, Increment = 1, CurrentValue = 80, Callback = function(x) ESP_Aimbot.Config.FOVRadius = x end})
Tab:CreateToggle({Name = "FOV Circle", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.FOVCircle = x end})
Tab:CreateToggle({Name = "RGB Modo", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.RGBMode = x end})
Tab:CreateSlider({Name = "RGB Speed", Range = {0.05, 2}, Increment = 0.01, CurrentValue = 0.6, Callback = function(x) ESP_Aimbot.Config.RGBSpeed = x end})
Tab:CreateDropdown({Name = "Target Part", Options={"Head","UpperTorso","Torso","HumanoidRootPart"}, CurrentOption = "Head", Callback = function(x) ESP_Aimbot.Config.TargetPart = x end})
Tab:CreateToggle({Name = "Hitbox", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.HitboxEnabled = x end})
Tab:CreateSlider({Name = "Hitbox Size", Range = {2, 10}, Increment = 0.1, CurrentValue = 2, Callback = function(x) ESP_Aimbot.Config.HitboxSize = x end})
Tab:CreateToggle({Name = "XRAY", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.XRAYEnabled = x end})
Tab:CreateSlider({Name = "XRAY Transparency", Range = {0, 1}, Increment = 0.01, CurrentValue = 0.2, Callback = function(x) ESP_Aimbot.Config.XRAYTransparency = x end})
Tab:CreateToggle({Name = "Iluminação Ambiente", CurrentValue = false, Callback = function(x) ESP_Aimbot.Config.AmbientLighting = x end})
Tab:CreateSlider({Name = "Brilho Ambiente", Range = {0, 10}, Increment = 0.1, CurrentValue = 2.5, Callback = function(x) ESP_Aimbot.Config.AmbientBrightness = x end})

-- ADICIONADOS: Noclip e Pulo Infinito (no mesmo padrão!)
Tab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Callback = function(x)
        NoclipEnabled = x
        if not x and LocalPlayer.Character then
            -- Ao desativar, volta colisão ao padrão
            for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = true
                end
            end
        end
    end
})

Tab:CreateToggle({
    Name = "Pulo Infinito",
    CurrentValue = false,
    Callback = function(x)
        InfiniteJumpEnabled = x
    end
})

-- (Fim do script)